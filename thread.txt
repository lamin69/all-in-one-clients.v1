go to this url : https://shellngn.com/ read all the documentations scrol all the website to get an idea about the fuctionalities of the services this wesite provides . after analyzing every this my project is to create a exactly an app that will be used with docke and provides the same services and has exactely the same layout of the graphics in this website . now tel me briefly if you can generate all codes to to ashieve this . if yes this is the files structure for this project i generate the complete codes one at the time and i will prompt you for the next code

this is the file tructure for the the project : 
shellngn-clone/
├── backend/
│ ├── src/
│ │ ├── controllers/
│ │ ├── models/
│ │ ├── routes/
│ │ ├── services/
│ │ ├── utils/
│ │ ├── app.js
│ │ └── server.js
│ ├── Dockerfile
│ ├── docker-compose.yml
│ └── package.json
├── frontend/
│ ├── public/
│ │ ├── index.html
│ │ └── favicon.ico
│ ├── src/
│ │ ├── assets/
│ │ ├── components/
│ │ ├── pages/
│ │ ├── services/
│ │ ├── App.js
│ │ ├── index.js
│ │ └── styles.css
│ ├── Dockerfile
│ └── package.json
├── scripts/
│ ├── db/
│ │ └── init.js
│ └── deploy/
│ └── deploy.sh
├── .env
├── .gitignore
└── README.md

YOUR TASKS : 

Create an application that replicates Shellngn's services and layout as folloow :

Functionality to Implement
SSH, SFTP, FTP, SMB, WEBDAV , Clients:

Web-based terminals with tabbed sessions.
File browser for SFTP, FTP, SMB, WEBDAV, with drag-and-drop upload/download and file editor.

Device and Identity Management:

Organize servers into folders, assign icons, and configure settings.
Manage identities for easy credential updates.
Automation and UI Features:

Command snippets for SSH automation.
Single-click connections and tabbed interfaces.
Always up-to-date with no client-side installations.
Technology Stack
Frontend:

HTML, CSS, JavaScript (React.js for dynamic components).
WebSocket for real-time SSH/terminal sessions.
Libraries for terminal emulation (e.g., xterm.js).
Backend:

Node.js for server-side logic.
Docker for containerized deployment.
APIs to manage SSH, SFTP, FTP, SMB, WEBDAV sessions.
Database:

MongoDB or PostgreSQL for storing user data, server configurations, and session logs.
Steps to Develop
Setup Docker Containers:

Create Docker images for the application services.
Implement Docker Compose to orchestrate multi-container setups.
Develop Frontend:

Build a responsive UI that matches Shellngn's layout using React.js.
Integrate terminal emulation using xterm.js.
Implement file browser and editor with drag-and-drop capabilities.
Develop Backend:

Implement WebSocket server for SSH sessions.
Create REST APIs for managing devices, identities, and file operations.
Set up authentication and authorization mechanisms.
Testing and Deployment:

Write unit and integration tests for all components.
Use CI/CD pipelines for automated testing and deployment.
Deploy on cloud platforms (e.g., AWS, Azure) for scalability.
Additional Resources
Documentation: Provide comprehensive documentation for both users and developers.
Support: Implement a support system for user queries and issues. now lets start with html code.

keep track of all the above steps , incase we encountre issues with building the app in docker . now lets proceed with next code , each time you provide a code mention its path in according to the above file strucrue
